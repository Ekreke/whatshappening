// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.12.4
// source: whatsappening/v1/rank.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRankWordCount = "/whatshappening.v1.Rank/WordCount"

type RankHTTPServer interface {
	// WordCount Sends a greeting
	WordCount(context.Context, *WordCountRequest) (*WordCountReply, error)
}

func RegisterRankHTTPServer(s *http.Server, srv RankHTTPServer) {
	r := s.Route("/")
	r.GET("/stats/wordcount", _Rank_WordCount0_HTTP_Handler(srv))
}

func _Rank_WordCount0_HTTP_Handler(srv RankHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WordCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankWordCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WordCount(ctx, req.(*WordCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WordCountReply)
		return ctx.Result(200, reply)
	}
}

type RankHTTPClient interface {
	WordCount(ctx context.Context, req *WordCountRequest, opts ...http.CallOption) (rsp *WordCountReply, err error)
}

type RankHTTPClientImpl struct {
	cc *http.Client
}

func NewRankHTTPClient(client *http.Client) RankHTTPClient {
	return &RankHTTPClientImpl{client}
}

func (c *RankHTTPClientImpl) WordCount(ctx context.Context, in *WordCountRequest, opts ...http.CallOption) (*WordCountReply, error) {
	var out WordCountReply
	pattern := "/stats/wordcount"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRankWordCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
